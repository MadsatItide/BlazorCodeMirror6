@namespace CodeMirror6

@implements IAsyncDisposable

@inject IJSRuntime JSRuntime


<div id=@Id />


@code {
    [Parameter] public string Id { get; set; } = $"CodeMirror6_Editor_{Guid.NewGuid().ToString()}";
    [Parameter] public int TabSize { get; set; } = 2;
    [Parameter] public string? Text { get; set; }
    [Parameter] public EventCallback<string?> TextChanged { get; set; }
    [Parameter] public string? PlaceholderText { get; set; }
    [Parameter] public EventCallback<bool> OnFocusChanged { get; set; }
    [Parameter] public List<SelectionRange>? SelectionRanges { get; set; }
    [Parameter] public EventCallback<List<SelectionRange>?> SelectionRangesChanged { get; set; }

    private CodeMirrorJsInterop? CmJsInterop = null;
    private bool hasFocus;
    private bool shouldRender = true;

#region Previous Parameter Values
    private string? prevText;
    private int prevTabSize;
    private string? prevPlaceholderText;
#endregion

    /// <summary>
    /// The document contents has changed
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    [JSInvokable]
    public async Task DocChanged(string value)
    {
        if (Text?.Replace("\r", "") == value?.Replace("\r", "")) return;
        Text = value?.Replace("\r", "") ?? "";
        prevText = Text;
        await TextChanged.InvokeAsync(Text);
    }

    /// <summary>
    /// The document focus has changed
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    [JSInvokable]
    public async Task FocusChanged(bool value)
    {
        if (hasFocus == value) return;
        hasFocus = value;
        await OnFocusChanged.InvokeAsync(hasFocus);
        if (!hasFocus) await SelectionRangesChanged.InvokeAsync(null);
    }

    /// <summary>
    /// The cursor position or selections have changed
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    [JSInvokable]
    public async Task SelectionSet(IEnumerable<SelectionRange>? value)
    {
        SelectionRanges = value?.ToList();
        await SelectionRangesChanged.InvokeAsync(SelectionRanges);
    }

    /*
    [JSInvokable] public async Task CursorActivity() => await DoCursorActivity();
    [JSInvokable] public async Task OnFocus() => await DoOnFocus();
    [JSInvokable] public async Task OnBlur() => await DoOnBlur();
    [JSInvokable] public async Task<string> UploadFileBlob(string base64, string fileName) => await DoUploadFileBlob(base64, fileName);
    [JSInvokable] public async Task<string> RequestPasteAction(string[] options) => await DoRequestPasteAction(options);
    */

    protected override void OnInitialized()
    {
        prevTabSize = TabSize;
        prevText = Text;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            if (CmJsInterop is null) {
                CmJsInterop = new CodeMirrorJsInterop(JSRuntime, this);
                await CmJsInterop.InitCodeMirror();
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        shouldRender = true;
        if (CmJsInterop is null) return;
        shouldRender = false;
        if (prevTabSize != TabSize) {
            prevTabSize = TabSize;
            await CmJsInterop.SetTabSize();
        }
        if (prevText?.Replace("\r", "") != Text?.Replace("\r", "")) {
            prevText = Text;
            await CmJsInterop.SetText();
        }
        if (prevPlaceholderText != PlaceholderText) {
            prevPlaceholderText = PlaceholderText;
            await CmJsInterop.SetPlaceholderText(PlaceholderText);
        }
        shouldRender = true;
    }

    protected override bool ShouldRender() => shouldRender;

    public async ValueTask DisposeAsync()
    {
        if (CmJsInterop is not null)
            await CmJsInterop.DisposeAsync();
    }
}
