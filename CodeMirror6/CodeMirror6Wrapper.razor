@implements IAsyncDisposable

@inject IJSRuntime JSRuntime


<div id=@Id />

<div>
    @hasFocus
</div>

@if (ranges != null) {
    <div>
        Selection ranges:
    </div>
    @foreach(var range in ranges) {
        <div>
            From @range.From
            To @range.To
        </div>
    }
}

@code {
    [Parameter] public string Id { get; set; } = $"CodeMirror6_Editor_{Guid.NewGuid().ToString()}";
    [Parameter] public int TabSize { get; set; } = 8;
    [Parameter] public string? Text { get; set; }
    [Parameter] public EventCallback<string?> TextChanged { get; set; }
    [Parameter] public string? PlaceholderText { get; set; }
    [Parameter] public EventCallback<bool> OnFocusChanged { get; set; }

    private CodeMirrorJsInterop? JsInterop = null;
    private bool hasFocus;
    private List<SelectionRange>? ranges = null;
    private bool shouldRender = true;
    private string? prevText;
    private int prevTabSize;



    /// <summary>
    /// The document contents has changed
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    [JSInvokable]
    public async Task DocChanged(string value)
    {
        if (Text?.Replace("\r", "") == value?.Replace("\r", "")) return;
        Text = value?.Replace("\r", "");
        prevText = Text;
        await TextChanged.InvokeAsync(Text);
    }

    /// <summary>
    /// The document focus has changed
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    [JSInvokable]
    public async Task FocusChanged(bool value)
    {
        if (hasFocus == value) return;
        hasFocus = value;
        await OnFocusChanged.InvokeAsync(hasFocus);
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// The cursor position or selections have changed
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    [JSInvokable]
    public async Task SelectionSet(IEnumerable<SelectionRange>? value)
    {
        ranges = value?.ToList();
        await InvokeAsync(StateHasChanged);
    }


    /*
    [JSInvokable] public async Task CursorActivity() => await DoCursorActivity();
    [JSInvokable] public async Task OnFocus() => await DoOnFocus();
    [JSInvokable] public async Task OnBlur() => await DoOnBlur();
    [JSInvokable] public async Task<string> UploadFileBlob(string base64, string fileName) => await DoUploadFileBlob(base64, fileName);
    [JSInvokable] public async Task<string> RequestPasteAction(string[] options) => await DoRequestPasteAction(options);
    */

    protected override void OnInitialized()
    {
        prevTabSize = TabSize;
        prevText = Text;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            if (JsInterop == null) {
                JsInterop = new CodeMirrorJsInterop(JSRuntime, this);
                await JsInterop.InitCodeMirror();
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        shouldRender = true;
        if (JsInterop == null) return;
        shouldRender = false;
        if (prevTabSize != TabSize) {
            prevTabSize = TabSize;
            await JsInterop.SetTabSize();
            shouldRender = true;
        }
        if (prevText?.Replace("\r", "") != Text?.Replace("\r", "")) {
            prevText = Text;
            await JsInterop.SetText();
            shouldRender = true;
        }
    }

    protected override bool ShouldRender() => shouldRender;

    public async ValueTask DisposeAsync()
    {
        if (JsInterop != null)
            await JsInterop.DisposeAsync();
    }
}
