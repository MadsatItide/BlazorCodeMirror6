@implements IAsyncDisposable

@inject IJSRuntime JSRuntime


<div id=@Id />


@code {
    [Parameter] public string Id { get; set; } = $"CodeMirror6_Editor_{Guid.NewGuid().ToString()}";
    [Parameter] public string? Text { get; set; }
    [Parameter] public EventCallback<string?> TextChanged { get; set; }
    [Parameter] public string? PlaceholderText { get; set; }
    [Parameter] public EventCallback<bool> OnFocusChanged { get; set; }

    private CodeMirrorJsInterop? JsInterop = null;
    private bool HasFocus;



    internal async Task DocChanged(string value)
    {
        Text = value;
        await TextChanged.InvokeAsync(value);
    }
    internal async Task FocusChanged(bool value)
    {
        HasFocus = value;
        await OnFocusChanged.InvokeAsync(HasFocus);
        await InvokeAsync(StateHasChanged);
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            if (JsInterop == null) {
                JsInterop = new CodeMirrorJsInterop(JSRuntime);
                await JsInterop.InitCodeMirror(this);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (JsInterop != null)
            await JsInterop.DisposeAsync();
    }
}
