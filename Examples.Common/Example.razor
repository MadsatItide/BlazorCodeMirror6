<h1>Code Mirror 6 Wrapper Demo</h1>

<label for="Theme">Theme</label>
<select @bind=@Theme id="Theme">
    @foreach (var theme in Enum.GetValues(typeof(ThemeMirrorTheme)))
    {
        <option value="@theme">@theme</option>
    }
</select>

<label for="Language">Language</label>
<select @bind=@Language id="Language">
    @foreach (var language in Enum.GetValues(typeof(CodeMirrorLanguage)))
    {
        <option value="@language">@language</option>
    }
</select>

<label for="tabSizeInput">TabSize:</label>
<input id="tabSizeInput" @bind-value=TabSize @bind-value:event="oninput" type="number" min="1" max="8" step="1" />

<label for="AutoFormatMarkdown">Auto-Format Markdown</label>
<input id="AutoFormatMarkdown" type="checkbox" @bind=@AutoFormatMarkdown />

<button class="btn btn-danger"
    @onclick=@(async () => {
        Text = code.Replace("\r", "");
        await InvokeAsync(StateHasChanged);
    })
>Reset text</button>

<CodeMirror6Wrapper
    IsWASM=@IsWASM
    @bind-Doc=@Text
    Placeholder="Enter your code.... (1)"
    TabSize=@TabSize
    IndentationUnit=@TabSize
    @bind-Selection=@selectionRanges1
    Theme=@Theme
    Language=@Language
    AutoFormatMarkdown=@AutoFormatMarkdown
    LintDocument=@LintDocument
    Setup=@Setup
    ReplaceEmojiCodes=@ReplaceEmojiCodes
    GetMentionCompletions=@GetMentionCompletions
    UploadFile=@UploadFile
    Editable
    ReadOnly=false
    LineWrapping=@LineWrapping
    style="max-width: 100%; max-height: 60em; "
>
    <ContentBefore Context="c">
        <div class="toolbar sticky-top alert alert-info my-3">
            <button class=@ButtonClass(c.State, "StrongEmphasis") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownBold)) title="Toggle bold text (Ctrl-B)">
                <i class="fa fa-bold"></i>
            </button>
            <button class=@ButtonClass(c.State, "Emphasis") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownItalic)) title="Toggle italic text (Ctrl-I)">
                <i class="fa fa-italic"></i>
            </button>
            <button class=@ButtonClass(c.State, "Strikethrough") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownStrikethrough)) title="Toggle strike-through text">
                <i class="fa fa-strikethrough"></i>
            </button>
            <button class=@ButtonClass(c.State, "InlineCode") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownCode)) title="Toggle inline code text">
                <i class="fa fa-code"></i>
            </button>
            <button class=@ButtonClass(c.State, "FencedCode") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownCodeBlock)) title="Toggle code block text">
                <i class="fab fa-codepen"></i>
            </button>
            <button class=@ButtonClass(c.State, "Blockquote") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownQuote)) title="Toggle quoted text">
                <i class="fa fa-quote-right"></i>
            </button>
            <button class=@ButtonClass(c.State, "ATXHeading") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.IncreaseMarkdownHeadingLevel)) title="Increase Markdown heading level">
                <i class="fa fa-heading"></i> +
            </button>
            <button class=@ButtonClass(c.State, "ATXHeading") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.DecreaseMarkdownHeadingLevel)) title="Decrease Markdown heading level">
                <i class="fa fa-heading"></i> -
            </button>
            @for (var i = 1; i <= 6; i++) {
                var headingLevel = i; // Capture the current value of i in a local variable
                <button class=@ButtonClass(c.State, $"ATXHeading{headingLevel}") @onclick=@(() => c.Commands.Dispatch(CodeMirrorCommandOneParameter.ToggleMarkdownHeading, headingLevel)) title=@($"Toggle heading text {i}")>
                    <i class="fa fa-heading"></i> @($"{headingLevel}")
                </button>
            }
            <button class=@ButtonClass(c.State, "BulletList") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownUnorderedList)) title="Toggle unordered list">
                <i class="fa fa-list-ul"></i>
            </button>
            <button class=@ButtonClass(c.State, "OrderedList") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownOrderedList)) title="Toggle ordered list">
                <i class="fa fa-list-ol"></i>
            </button>
            <button class=@ButtonClass(c.State, "Task") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownTaskList)) title="Toggle task list">
                <i class="fa fa-tasks"></i>
            </button>
            <button class=@ButtonClass(c.State, "") @onclick=@(() => c.Commands.Dispatch(CodeMirrorCommandOneParameter.InsertOrReplaceText, "test")) title="Insert or replace text">
                Insert or replace text
            </button>
            <button class=@ButtonClass(c.State, "HorizontalRule") @onclick=@(() => c.Commands.Dispatch(CodeMirrorCommandOneParameter.InsertTextAbove, "\n---\n")) title="Insert separator above">
                <i class="fas fa-minus"></i>
            </button>
            <button class=@ButtonClass(ReplaceEmojiCodes) @onclick=@(() => ToggleEmojis(c.Commands)) title="Toggle replacing :emoji_codes: with the unicode character">
                <i class="far fa-smile"></i>
            </button>
            <button class=@ButtonClass(LineWrapping) @onclick=@(() => LineWrapping = !LineWrapping) title="Toggle long line wrapping">
                <i class="fas fa-paragraph"></i>
            </button>
            <button class=@ButtonClass(c.State, "") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.Undo)) title="Undo (Ctrl-Z)">
                <i class="fas fa-undo"></i>
            </button>
            <button class=@ButtonClass(c.State, "") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.Redo)) title="Redo (Ctrl-Y)">
                <i class="fas fa-redo"></i>
            </button>
        </div>
    </ContentBefore>
</CodeMirror6Wrapper>

Result:
<pre>@Text</pre>
<hr />

@if (selectionRanges1 is not null) {
    <div>
        Selection ranges:
    </div>
    @foreach(var range in selectionRanges1) {
        <div>
            From @range.From
            To @range.To
        </div>
    }
    <hr />
}

<CodeMirror6Wrapper
    IsWASM=@IsWASM
    Placeholder="Enter your code.... (2)"
    @bind-Doc=@Text2
    @bind-Selection=@selectionRanges2
    Theme=@Theme
    Language=@CodeMirrorLanguage.Markdown
    AutoFormatMarkdown=@AutoFormatMarkdown
    LintDocument=@LintDocument
    AllowHorizontalResize
    AllowVerticalResize=false
/>

Result:
<pre>@Text2</pre>
<hr />

@if (selectionRanges2 is not null) {
    <div>
        Selection ranges:
    </div>
    @foreach(var range in selectionRanges2) {
        <div>
            From @range.From
            To @range.To
        </div>
    }
    <hr />
}

<CodeMirror6Wrapper
    IsWASM=@IsWASM
    @bind-Doc=@Text3
    Placeholder=@PlaceHolderText
    @bind-Selection=@selectionRanges3
    Theme=@Theme
    Language=@CodeMirrorLanguage.Markdown
    AutoFormatMarkdown=@AutoFormatMarkdown
    LintDocument=@LintDocument
    AllowHorizontalResize=false
    AllowVerticalResize=false
/>

Result:
<pre>@Text3</pre>
<hr />

@if (selectionRanges3 is not null) {
    <div>
        Selection ranges:
    </div>
    @foreach(var range in selectionRanges3) {
        <div>
            From @range.From
            To @range.To
        </div>
    }
    <hr />
}

<button class="btn"
    @onclick=@(async () => {
        PlaceHolderText = NewPlaceHolderText;
        await InvokeAsync(StateHasChanged);
    })
>Change placeholder text</button>


@code
{
    [Parameter] public bool IsWASM { get; set; }
    private string? Text = code;
    private string? Text2 = "# Example 2";
    private string? Text3;
    private int TabSize = 4;
    private List<SelectionRange>? selectionRanges1;
    private List<SelectionRange>? selectionRanges2;
    private List<SelectionRange>? selectionRanges3;
    private string PlaceHolderText = "Enter your code.... (3)";
    private string NewPlaceHolderText = "New placeholder text !";
    private ThemeMirrorTheme Theme = ThemeMirrorTheme.OneDark;
    private CodeMirrorLanguage Language = CodeMirrorLanguage.Markdown;
    private bool AutoFormatMarkdown = true;
    private bool ReplaceEmojiCodes = false;
    private bool LineWrapping = true;
    private readonly CodeMirrorSetup Setup = new() {
        HighlightActiveLine = false,
        LineNumbers = true,
        HighlightActiveLineGutter = false,
        HighlightSelectionMatches = false,
        ScrollToEnd = true,
        BindMode = DocumentBindMode.OnDelayedInput,
    };
    private string ButtonClass(CodeMirrorState state, string docStyleTag) => ButtonClass(state.MarkdownStylesAtSelections?.Contains(docStyleTag) == true);
    private string ButtonClass(bool enabled) => enabled
        ? "btn btn-sm btn-primary"
        : "btn btn-sm btn-outline-secondary";

    private async Task ToggleEmojis(CMCommandDispatcher commands)
    {
        ReplaceEmojiCodes = !ReplaceEmojiCodes;
        await commands.Dispatch(CodeMirrorSimpleCommand.Focus);
    }

    private Task<List<CodeMirrorDiagnostic>> LintDocument(string code, CancellationToken cancellationToken)
    {
        var result = new List<CodeMirrorDiagnostic>();
        var position = 0;
        foreach (var line in code.Split('\n')) {
            cancellationToken.ThrowIfCancellationRequested();
            var subLine = line;
            var offset = 0;
            while (subLine.Contains("error")) {
                var indexOfError = subLine.IndexOf("error");
                var errorLength = "error".Length;
                result.Add(
                    new CodeMirrorDiagnostic {
                        From = position + indexOfError + offset,
                        To = position + indexOfError + errorLength + offset,
                        Severity = "error",
                        Message = "Error message",
                        Source = "Custom linter"
                    }
                );
                offset += indexOfError + errorLength;
                subLine = subLine.Substring(indexOfError + errorLength);
            }
            position += line.Length + 1;
        }
        return Task.FromResult(result);
    }

    private static async Task<List<CodeMirrorCompletion>> GetMentionCompletions()
    {
        await Task.Delay(1000);
        return await Task.FromResult<List<CodeMirrorCompletion>>(
            [
                new CodeMirrorCompletion {
                    Label = "abc",
                    Detail = "Alice",
                    Info = "Alice is a person",
                    // Type = "variable"
                },
                new CodeMirrorCompletion {
                    Label = "bcd",
                    Detail = "Bob",
                    Info = "Bob is a person",
                    // Type = "variable"
                },
                new CodeMirrorCompletion {
                    Label = "cde",
                    Detail = "Carol",
                    Info = "Carol is a person",
                    // Type = "variable"
                },
                new CodeMirrorCompletion {
                    Label = "def",
                    Detail = "Dave",
                    Info = "Dave is a person",
                    // Type = "variable"
                },
                new CodeMirrorCompletion {
                    Label = "eee",
                    Detail = "Eve",
                    Info = "Eve is a person",
                    // Type = "variable"
                },
                new CodeMirrorCompletion {
                    Label = "fff",
                    Detail = "Frank",
                    Info = "Frank is a person",
                    // Type = "variable"
                },
                new CodeMirrorCompletion {
                    Label = "ggg",
                    Detail = "Grace",
                    Info = "Grace is a person",
                    // Type = "variable"
                },
                new CodeMirrorCompletion {
                    Label = "hhh",
                    Detail = "Heidi",
                    Info = "Heidi is a person",
                    // Type = "variable"
                },
                new CodeMirrorCompletion {
                    Label = "Ivan",
                    Detail = "Ivan",
                    Info = "Ivan is a person",
                    // Type = "variable"
                },
                new CodeMirrorCompletion {
                    Label = "Judy",
                    Detail = "Judy",
                    Info = "Judy is a person",
                    // Type = "variable"
                },
                new CodeMirrorCompletion {
                    Label = "Mallory",
                    Detail = "Mallory",
                    Info = "Mallory is a person",
                    // Type = "variable"
                },
                new CodeMirrorCompletion {
                    Label = "Oscar",
                    Detail = "Oscar",
                    Info = "Oscar is a person",
                    // Type = "variable"
                },
                new CodeMirrorCompletion {
                    Label = "Peggy",
                    Detail = "Peggy",
                    Info = "Peggy is a person",
                    // Type = "variable"
                },
            ]
        );
    }

    private async Task<string> UploadFile(Microsoft.AspNetCore.Http.IFormFile file)
    {
        var fileBytes = new byte[file.Length];
        await file.OpenReadStream().ReadAsync(fileBytes);
        var base64 = Convert.ToBase64String(fileBytes);
        var mimeType = file.ContentType;

        return $"data:{mimeType};base64,{base64}";
    }
}
