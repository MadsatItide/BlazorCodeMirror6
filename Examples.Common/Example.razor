<h1>Code Mirror 6 Wrapper Demo</h1>

<label for="Theme">Theme</label>
<select @bind=@Theme id="Theme">
    @foreach (var theme in Enum.GetValues(typeof(ThemeMirrorTheme)))
    {
        <option value="@theme">@theme</option>
    }
</select>

<label for="Language">Language</label>
<select @bind=@Language id="Language">
    @foreach (var language in Enum.GetValues(typeof(CodeMirrorLanguage)))
    {
        <option value="@language">@language</option>
    }
</select>

<label for="tabSizeInput">TabSize:</label>
<input id="tabSizeInput" @bind-value=TabSize @bind-value:event="oninput" type="number" min="1" max="8" step="1" />

<label for="AutoFormatMarkdownHeaders">Auto-Format Markdown Headers</label>
<input id="AutoFormatMarkdownHeaders" type="checkbox" @bind=@AutoFormatMarkdownHeaders />

<button class="btn btn-danger"
    @onclick=@(async () => {
        Text = code.Replace("\r", "");
        await InvokeAsync(StateHasChanged);
    })
>Reset text</button>

<CodeMirror6Wrapper
    @bind-Doc=@Text
    Placeholder="Enter your code.... (1)"
    TabSize=@TabSize
    @bind-Selection=@selectionRanges1
    Theme=@Theme
    Language=@Language
    AutoFormatMarkdownHeaders=@AutoFormatMarkdownHeaders
    style="max-width: 100%; max-height: 40em; overflow: auto;"
>
    <ContentBefore Context="c">
        <div class="alert alert-info mt-3">
            <button class=@ButtonClass(c.State, "StrongEmphasis") @onclick=@(() => c.CmJsInterop.Commands.ToggleMarkdownBold()) title="Toggle bold text (Ctrl-B)">
                Bold
            </button>
            <button class=@ButtonClass(c.State, "Emphasis") @onclick=@(() => c.CmJsInterop.Commands.ToggleMarkdownBold()) title="Toggle italic text (Ctrl-I)">
                Italic
            </button>
            <button class=@ButtonClass(c.State, "Strikethrough") @onclick=@(() => c.CmJsInterop.Commands.ToggleMarkdownStrikethrough()) title="Toggle strike-through text">
                Strikethrough
            </button>
            <button class="btn" @onclick=@(() => c.CmJsInterop.Commands.ToggleMarkdownCode()) title="Toggle inline code text">
                Code
            </button>
            <button class="btn" @onclick=@(() => c.CmJsInterop.Commands.ToggleMarkdownCodeBlock()) title="Toggle code block text">
                Code block
            </button>
            <button class="btn" @onclick=@(() => c.CmJsInterop.Commands.ToggleMarkdownQuote()) title="Toggle quoted text">
                Quote
            </button>
            @for (var i = 1; i <= 6; i++) {
                var headingLevel = i; // Capture the current value of i in a local variable
                <button class=@ButtonClass(c.State, $"ATXHeading{i}") @onclick=@(() => c.CmJsInterop.Commands.ToggleMarkdownHeading(headingLevel)) title="Toggle heading text">
                    @($"H{i}")
                </button>
            }
            <button class="btn" @onclick=@(() => c.CmJsInterop.Commands.ToggleMarkdownOrderedList()) title="Toggle ordered list">
                Ordered list
            </button>
            <button class="btn" @onclick=@(() => c.CmJsInterop.Commands.ToggleMarkdownUnorderedList()) title="Toggle unordered list">
                Bullet list
            </button>
            <button class="btn" @onclick=@(() => c.CmJsInterop.Commands.ToggleMarkdownTaskList()) title="Toggle task list">
                Task list
            </button>
        </div>
    </ContentBefore>
</CodeMirror6Wrapper>
<hr />
Result:
<pre>@Text</pre>
<hr />


@if (selectionRanges1 is not null) {
    <div>
        Selection ranges:
    </div>
    @foreach(var range in selectionRanges1) {
        <div>
            From @range.From
            To @range.To
        </div>
    }
    <hr />
}

<CodeMirror6Wrapper
    Placeholder="Enter your code.... (2)"
    @bind-Doc=@Text2
    @bind-Selection=@selectionRanges2
    Theme=@Theme
    Language=@CodeMirrorLanguage.Markdown
    AutoFormatMarkdownHeaders=@AutoFormatMarkdownHeaders
/>
<hr />
Result:
<pre>@Text2</pre>
<hr />

@if (selectionRanges2 is not null) {
    <div>
        Selection ranges:
    </div>
    @foreach(var range in selectionRanges2) {
        <div>
            From @range.From
            To @range.To
        </div>
    }
    <hr />
}

<CodeMirror6Wrapper
    @bind-Doc=@Text3
    Placeholder=@PlaceHolderText
    @bind-Selection=@selectionRanges3
    Theme=@Theme
    Language=@CodeMirrorLanguage.Markdown
    AutoFormatMarkdownHeaders=@AutoFormatMarkdownHeaders
/>

<hr />

@if (selectionRanges3 is not null) {
    <div>
        Selection ranges:
    </div>
    @foreach(var range in selectionRanges3) {
        <div>
            From @range.From
            To @range.To
        </div>
    }
    <hr />
}
Result:
<pre>@Text3</pre>
<hr />

<button class="btn"
    @onclick=@(async () => {
        PlaceHolderText = NewPlaceHolderText;
        await InvokeAsync(StateHasChanged);
    })
>Change placeholder text</button>


@code
{
    private const string tab = "\t";
    private const string code = $@"## Title

```jsx
function Demo() {{
{tab}return <div>demo</div>
}}
```

```bash
# Not dependent on uiw.
npm install @codemirror/lang-markdown --save
npm install @codemirror/language-data --save
```

[website ulr](https://github.com/gaelj/BlazorCodeMirror6)

```go
package main
import ""fmt""
func main() {{
{tab}fmt.Println(""Hello, 世界"")
}}
```
";
    private string? Text = code;
    private string? Text2 = "# Example 2";
    private string? Text3;
    private int TabSize = 4;
    private List<SelectionRange>? selectionRanges1;
    private List<SelectionRange>? selectionRanges2;
    private List<SelectionRange>? selectionRanges3;
    private string PlaceHolderText = "Enter your code.... (3)";
    private string NewPlaceHolderText = "New placeholder text !";
    private ThemeMirrorTheme Theme = ThemeMirrorTheme.OneDark;
    private CodeMirrorLanguage Language = CodeMirrorLanguage.Markdown;
    private bool AutoFormatMarkdownHeaders = true;
    private string ButtonClass(CodeMirrorState state, string docStyleTag) => state.MarkdownStylesAtSelections?.Contains(docStyleTag) == true
        ? "btn btn-primary"
        : "btn";
}
